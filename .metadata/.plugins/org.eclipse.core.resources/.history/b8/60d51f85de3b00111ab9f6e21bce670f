import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

import espest.Operador;
import espest.OperadorGeral;
import espest.Transicao;
import agentedelib.AgenteDelib;
import agentedelib.OperadorAccao;
import ambiente.*;


public class AgenteDelibPDM<Coordenada> extends AgenteDelib<Coordenada> implements ModeloPDM<Coordenada>{
	
	private final int RMAX = 1;
	private HashMap<Coordenada, Operador<Coordenada>> politica;
	private MecProcPDM mecproc;
	
	public AgenteDelibPDM (MecProcPDM<Coordenada> mecproc){
		
		this.mecproc = mecproc;
	}
	
	@Override
	public double t(Transicao trans) {
		//para modelo determinista.
		return 1;
	}
	@Override
	public double r(Transicao trans) {
		if(trans.obterEstadoSuc().equals(intencoes.getFirst().getPosicao()))
			return RMAX;
		return -trans.getCusto();
	}
	@Override
	public Set s() {
		return getAmb().getPosicoes();
	}
	@Override
	public Set o(Object s) {
		return new HashSet(capacidades);
	}
	
	@Override
	public void agir() {
		
		Coordenada posActual = crencas.getAgente().getPosicao();
		if(!posActual.equals(intencoes.getFirst().getPosicao())){
			Operador<Coordenada> oper = politica.get(posActual);
			Accao a = ((OperadorAccao)oper).getAccao();
			getActuador().actuar(a);
		}
	}
	
	@Override
	protected void planear() {
		
		politica = mecproc.planearPolitica();
		
	}
	


}
