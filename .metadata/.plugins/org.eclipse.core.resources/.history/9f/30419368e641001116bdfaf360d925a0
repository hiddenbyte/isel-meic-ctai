import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

import agentedelib.AgenteDelib;
import agentedelib.OperadorAccao;
import ambiente.Accao;
import ambiente.Coordenada;
import espest.Operador;
import espest.OperadorGeral;
import espest.Transicao;




public class AgenteDelibPDM extends AgenteDelib<Coordenada> implements ModeloPDM<Coordenada>{
	
	private final int RMAX = 10;
	private HashMap<Coordenada, Operador<Coordenada>> politica;
	private MecProcPDM<Coordenada> mecproc;
	
	public AgenteDelibPDM (){
		
		mecproc = new MecProcPDM<Coordenada>(0.001,0.5,this);
	}
	
	@Override
	public double t(Transicao<Coordenada> trans) {
		//para modelo determinista.
		return 1;
	}
	@Override
	public double r(Transicao<Coordenada> trans) {
		
		if(trans.obterEstadoSuc().equals(intencoes.getFirst().getPosicao()))
			return RMAX;
		return -trans.getCusto();
	}
	@Override
	public Set<Coordenada> s() {
		
		return getAmb().getPosicoes();
	}
	@Override
	public Set<OperadorGeral<Coordenada>> o(Coordenada s) {
		
		return new HashSet<OperadorGeral<Coordenada>>(capacidades);
	}
	
	Coordenada posActual;
	
	@Override
	public void agir() {
		
		posActual = crencas.getAgente().getPosicao();
		if(!posActual.equals(intencoes.getFirst().getPosicao())){
			Operador<Coordenada> oper = politica.get(posActual);
			Accao a = ((OperadorAccao)oper).getAccao();
			getActuador().actuar(a);
		}
	}
	
	@Override
	protected void planear() {
		
		politica = mecproc.planearPolitica();
		
		pintar();
		
	}
	
	public void pintar() {
		
		getConsola().limpar();
		int n= (int)(Math.sqrt(mecproc.u.size()));
		double[][] map = new double[n][n];
		
		String line = "";
		
		for(Coordenada c : s()){
			map[c.getX()][c.getY()] = mecproc.u.get(c);
		}
		
		for(int i = 0 ; i<n ; i++){
			for(int j = 0; j<n ; j++){
				line += map[j][i] + "\t";
			}
			System.out.println(line);
			line = "";
		}
		
	}
	
	public static double round2(double num) {
		double result = value * 100;
		result = Math.round(result);
		result = result / 100;
		return result;
	}
	
}
